syntax = "proto2";
package NananGrpc;

service Nanan {  
    rpc CreateDockerImage (DockerImage) returns (Successed) {}
    rpc CreateDockerNetwork (CreateNetworkOptions) returns (Successed) {}
    rpc CreateDockerContainer (ContainerConfig) returns (Successed) {}
    rpc ConnectContainerToNetwork (ConnectNetwork) returns (Successed) {}
    rpc StartContainer (ContainerToStart) returns (Successed) {}
}

//message Empty {}

message DockerImage {
    required string name = 1;
}

message Successed {
    required bool successed = 1;
}

message CreateNetworkOptions {
    required string name = 1;
    optional bool check_duplicate = 2;
    optional string driver = 3;
    optional bool internal = 4;
    optional bool attachable = 5;
    optional bool ingress = 6;
    optional Ipam ipam = 7;
    optional bool enable_ipv6 = 8;
    map<string, string> options = 9;
    map<string, string> labels = 10;
}

message Ipam {
    optional string driver = 1;
    repeated IpamConfig config = 2;
    map<string, string> options = 3;
}

message IpamConfig {
    optional string subnet = 1;
    optional string ip_range = 2;
    optional string gateway = 3;
    map<string, string> auxiliary_addresses =4;
}

message ContainerConfig {
    required string container_name = 1;
    required string image = 2;
    repeated string env = 3;
    repeated string cmd = 4;
    repeated string exposed_ports = 5;
    optional HostConfig host_config = 6;
    /*
    pub hostname: Option<T>,
    pub domainname: Option<T>,
    pub user: Option<T>,
    pub attach_stdin: Option<bool>,
    pub attach_stdout: Option<bool>,
    pub attach_stderr: Option<bool>,
    pub exposed_ports: Option<HashMap<T, HashMap<(), ()>>>,
    pub tty: Option<bool>,
    pub open_stdin: Option<bool>,
    pub stdin_once: Option<bool>,
    pub healthcheck: Option<HealthConfig>,
    pub args_escaped: Option<bool>,
    pub volumes: Option<HashMap<T, HashMap<(), ()>>>,
    pub working_dir: Option<T>,
    pub entrypoint: Option<Vec<T>>,
    pub network_disabled: Option<bool>,
    pub mac_address: Option<T>,
    pub on_build: Option<Vec<T>>,
    pub labels: Option<HashMap<T, T>>,
    pub stop_signal: Option<T>,
    pub stop_timeout: Option<i64>,
    pub shell: Option<Vec<T>>,
    pub networking_config: Option<NetworkingConfig<T>>,
    */
}

message HostConfig {
    repeated PortBinding port_bindings = 1;
    /*
    pub cpu_shares: Option<i64>,
    pub memory: Option<i64>,
    pub cgroup_parent: Option<String>,
    pub blkio_weight: Option<u16>,
    pub blkio_weight_device: Option<Vec<ResourcesBlkioWeightDevice, Global>>,
    pub blkio_device_read_bps: Option<Vec<ThrottleDevice, Global>>,
    pub blkio_device_write_bps: Option<Vec<ThrottleDevice, Global>>,
    pub blkio_device_read_iops: Option<Vec<ThrottleDevice, Global>>,
    pub blkio_device_write_iops: Option<Vec<ThrottleDevice, Global>>,
    pub cpu_period: Option<i64>,
    pub cpu_quota: Option<i64>,
    pub cpu_realtime_period: Option<i64>,
    pub cpu_realtime_runtime: Option<i64>,
    pub cpuset_cpus: Option<String>,
    pub cpuset_mems: Option<String>,
    pub devices: Option<Vec<DeviceMapping, Global>>,
    pub device_cgroup_rules: Option<Vec<String, Global>>,
    pub device_requests: Option<Vec<DeviceRequest, Global>>,
    pub kernel_memory: Option<i64>,
    pub kernel_memory_tcp: Option<i64>,
    pub memory_reservation: Option<i64>,
    pub memory_swap: Option<i64>,
    pub memory_swappiness: Option<i64>,
    pub nano_cpus: Option<i64>,
    pub oom_kill_disable: Option<bool>,
    pub init: Option<bool>,
    pub pids_limit: Option<i64>,
    pub ulimits: Option<Vec<ResourcesUlimits, Global>>,
    pub cpu_count: Option<i64>,
    pub cpu_percent: Option<i64>,
    pub io_maximum_iops: Option<i64>,
    pub io_maximum_bandwidth: Option<i64>,
    pub binds: Option<Vec<String, Global>>,
    pub container_id_file: Option<String>,
    pub log_config: Option<HostConfigLogConfig>,
    pub network_mode: Option<String>,
    pub restart_policy: Option<RestartPolicy>,
    pub auto_remove: Option<bool>,
    pub volume_driver: Option<String>,
    pub volumes_from: Option<Vec<String, Global>>,
    pub mounts: Option<Vec<Mount, Global>>,
    pub cap_add: Option<Vec<String, Global>>,
    pub cap_drop: Option<Vec<String, Global>>,
    pub cgroupns_mode: Option<HostConfigCgroupnsModeEnum>,
    pub dns: Option<Vec<String, Global>>,
    pub dns_options: Option<Vec<String, Global>>,
    pub dns_search: Option<Vec<String, Global>>,
    pub extra_hosts: Option<Vec<String, Global>>,
    pub group_add: Option<Vec<String, Global>>,
    pub ipc_mode: Option<String>,
    pub cgroup: Option<String>,
    pub links: Option<Vec<String, Global>>,
    pub oom_score_adj: Option<i64>,
    pub pid_mode: Option<String>,
    pub privileged: Option<bool>,
    pub publish_all_ports: Option<bool>,
    pub readonly_rootfs: Option<bool>,
    pub security_opt: Option<Vec<String, Global>>,
    pub storage_opt: Option<HashMap<String, String, RandomState>>,
    pub tmpfs: Option<HashMap<String, String, RandomState>>,
    pub uts_mode: Option<String>,
    pub userns_mode: Option<String>,
    pub shm_size: Option<i64>,
    pub sysctls: Option<HashMap<String, String, RandomState>>,
    pub runtime: Option<String>,
    pub console_size: Option<Vec<i32, Global>>,
    pub isolation: Option<HostConfigIsolationEnum>,
    pub masked_paths: Option<Vec<String, Global>>,
    pub readonly_paths: Option<Vec<String, Global>>,
    */
}

message PortBinding {
    required string internal_port = 1;
    repeated ExternalBinding external_bindings = 2;
}

message ExternalBinding {
    required string host_ip = 1;
    required string host_port = 2;
}

message ConnectNetwork {
    required string container_id = 1;
    required string ipv4_address = 2;
    required string network_name = 3;
}

message ContainerToStart {
    required string name = 1;
}